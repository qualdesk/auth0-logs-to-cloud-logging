{"version":3,"sources":["../src/index.js"],"names":["connectLogs","opts","domain","clientId","clientSecret","auth0","projectId","logName","location","nodeId","namespace","google","batchSize","logger","checkpointId","connector","unsetConfig","filter","config","length","Error","a0stream","LogsApiStream","logging","Logging","log","Promise","resolve","reject","lastCheckpointId","logsProcessed","lastLimits","writeLog","line","entry","write","handleBatch","logs","limits","map","lastLog","next","handleEnd","debug","handleError","err","error","on"],"mappings":"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","sourcesContent":["import { Logging } from '@google-cloud/logging'\nimport { LogsApiStream } from 'auth0-log-extension-tools'\nimport { metadata, body } from './mapper'\n\nconst connectLogs = (opts) => {\n  // Configuration -------------\n  const { domain, clientId, clientSecret } = opts.auth0 || {}\n  const { projectId, logName, location, nodeId, namespace } = opts.google || { logName: 'auth0-logs', location: 'Europe', nodeId: domain, namespace: 'auth0'}\n  const { batchSize, logger, checkpointId } = opts.connector || { batchSize: 50 }\n\n  let unsetConfig = [ domain, clientId, clientSecret, projectId ]\n    .filter((config) => !(typeof(config) !== \"undefined\"))\n\n  if (unsetConfig.length > 0) {\n    throw new Error(`Required config not set`)\n  }\n\n  // Setup required objects ----\n  const a0stream = new LogsApiStream({\n    domain: domain,\n    clientId: clientId,\n    clientSecret: clientSecret,\n    checkpointId: checkpointId,\n    logger: logger\n  })\n\n  const logging = new Logging({ projectId })\n  const log = logging.log(logName)\n\n  // Run ----------------\n  return new Promise((resolve, reject) => {\n    let lastCheckpointId = checkpointId\n    let logsProcessed = 0\n    let lastLimits = {}\n\n    // Operations ----------------\n    const writeLog = (line) => {\n      const entry = log.entry(metadata({ location, nodeId, namespace }, line), body(line))\n      log.write(entry)\n    }\n\n    const handleBatch = ({ logs, limits }) => {\n      logs.map(writeLog)\n\n      // Save in case this was the last batch\n      const lastLog = logs[logs.length - 1]\n      logsProcessed += logs.length\n      lastCheckpointId = lastLog ? lastLog[\"_id\"] : lastCheckpointId\n      lastLimits = limits\n\n      next()\n    }\n\n    const handleEnd = () => {\n      if (logger) { logger.debug('No more logs to write') }\n\n      resolve({\n        checkpointId: lastCheckpointId,\n        logsProcessed: logsProcessed,\n        limits: lastLimits\n      })\n    }\n\n    const handleError = (err) => {\n      if (logger) { logger.error(`Error while fetching logs: ${err}`) }\n      reject(err)\n    }\n\n    const next = () => {\n      if (logger) { logger.debug(`Fetching another ${batchSize}...`) }\n      a0stream.next(batchSize)\n    }\n\n    a0stream.on('data', handleBatch)\n    a0stream.on('end', handleEnd)\n    a0stream.on('error', handleError)\n\n    next()\n  })\n}\n\nexport { connectLogs }\n\n"],"file":"index.js"}